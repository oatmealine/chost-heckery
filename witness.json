{"modules":[{"id":"374312cc7d1bffac","data":{"contents":"<script>\n  import Line from './Line.svelte';\n  \n  const LINE_WIDTH = 15;\n  const GRID_WIDTH = 100;\n\n  const WIDTH = 2;\n  const HEIGHT = 3;\n</script>\n\n<style>\n  .background {\n    position: absolute;\n    inset: 0;\n    background-color: #fff;\n    overflow: hidden;\n  }\n  .grid {\n    display: flex;\n    flex-wrap: wrap;\n  }\n</style>\n\nme: oh boy, I sure am glad I finished The Witness (2016) and don't have to solve any more puzzles!\\\nthe cohost witness puzzle:\n\n<div style=\"padding:{LINE_WIDTH*2}px;overflow:hidden\">\n  <div style=\"width:{GRID_WIDTH * WIDTH + LINE_WIDTH}px;height:{GRID_WIDTH * HEIGHT + LINE_WIDTH}px;position:relative\">\n    <div style=\"position:absolute;left:{GRID_WIDTH*WIDTH}px;top:{GRID_WIDTH*HEIGHT}px;width:{LINE_WIDTH*2.5}px;height:{LINE_WIDTH}px;background-color:rgba(0,0,0,0.15);z-index:999;pointer-events:none;border-radius:{LINE_WIDTH}px;transform:rotate(45deg);transform-origin:{LINE_WIDTH/2}px\"/>\n    <div class=\"background\" style=\"border-radius:{LINE_WIDTH/2}px\">\n      <div style=\"left:{GRID_WIDTH/2+LINE_WIDTH/2}px;top:{GRID_WIDTH*2+GRID_WIDTH/2+LINE_WIDTH/2}px;position:absolute;z-index:999\">\n        <div style=\"width:{(GRID_WIDTH-LINE_WIDTH)/4*2}px;height:{(GRID_WIDTH-LINE_WIDTH)/4*2}px;position:relative;bottom:{(GRID_WIDTH-LINE_WIDTH)/4}px;right:{(GRID_WIDTH-LINE_WIDTH)/4}px;display:flex;flex-wrap:wrap\">\n          <div style=\"background-color:#ffd8a8;width:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;height:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;border-radius:5px;margin:2px\"/>\n          <div style=\"background-color:#ffd8a8;width:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;height:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;border-radius:5px;margin:2px\"/>\n          <div style=\"background-color:transparent;width:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;height:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;margin:2px\"/>\n          <div style=\"background-color:#ffd8a8;width:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;height:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;border-radius:5px;margin:2px\"/>\n        </div>\n      </div>\n      <div style=\"left:{GRID_WIDTH+GRID_WIDTH/2+LINE_WIDTH/2}px;top:{GRID_WIDTH/2+LINE_WIDTH/2}px;position:absolute;z-index:999\">\n        <div style=\"width:{(GRID_WIDTH-LINE_WIDTH)/4*2}px;height:{(GRID_WIDTH-LINE_WIDTH)/4}px;position:relative;bottom:{(GRID_WIDTH-LINE_WIDTH)/4*0.5}px;right:{(GRID_WIDTH-LINE_WIDTH)/4*1}px;display:flex;flex-wrap:wrap\">\n          <div style=\"background-color:#ffd8a8;width:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;height:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;border-radius:5px;margin:2px\"/>\n          <div style=\"background-color:#ffd8a8;width:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;height:{(GRID_WIDTH-LINE_WIDTH)/4-4}px;border-radius:5px;margin:2px\"/>\n        </div>\n      </div>\n\n      <div style=\"position:absolute;background-color:#fff;width:{LINE_WIDTH}px;height:{LINE_WIDTH}px;left:{GRID_WIDTH*2}px;top:{GRID_WIDTH/2}px;z-index:1000;\"/>\n      \n      <div class=\"grid\" style=\"width:{GRID_WIDTH * (WIDTH+1)}px;height:{GRID_WIDTH * (HEIGHT + 1)}px\">\n        {#each Array((WIDTH + 1) * (HEIGHT + 1)).fill(0) as _}\n          <div style=\"width:{GRID_WIDTH}px;height:{GRID_WIDTH}px;border-left:{LINE_WIDTH}px solid rgba(0,0,0,0.15);border-top:{LINE_WIDTH}px solid rgba(0,0,0,0.15);z-index:999;pointer-events:none\"/>\n        {/each}\n      </div>\n    </div>\n    <div style=\"width:{LINE_WIDTH*2}px;height:{LINE_WIDTH*2}px;background-color:rgb(131,37,79);margin:-{LINE_WIDTH/2}px;border-radius:{LINE_WIDTH}px;left:0;position:absolute;z-index:9999;pointer-events:none\"/>\n    <Line at={[0,0]} width={WIDTH} height={HEIGHT} positions={[]} index={0}/>\n  </div>\n</div>\n\n<small>quick reset â¬‡</small>\n\n---"},"pluginId":"source.svelte","sends":["67d0bdc20c9d477c"],"namedSends":{},"graphPos":[-336,0]},{"id":"dd2c4ab77408cd7f","data":{"name":"Line","contents":"<script>\n  import LineSegment from './LineSegment.svelte';\n\n  export let width;\n  export let height;\n  export let positions;\n  export let at;\n  export let from;\n  export let index;\n\n  const LINE_WIDTH = 15;\n  const GRID_WIDTH = 100;\n\n  // massively adds to the filesize but prevents you from going back multiple turns at a time\n  const GO_BACK_FIX = true;\n  // if you're near an exit, you can't _not_ exit - decreases filesize but is also a bit ?\n  const ALWAYS_EXIT = true;\n  \n  function getOffset() {\n    if (from === 'right') {\n      return `left:${GRID_WIDTH}px;`;\n    } else if (from === 'left') {\n      return `right:${GRID_WIDTH}px;`;\n    } else if (from === 'down') {\n      return `top:${GRID_WIDTH}px;`;\n    } else if (from === 'up') {\n      return `bottom:${GRID_WIDTH}px;`;\n    } else {\n      return '';\n    }\n  }\n\n  function getValidPositions() {\n    return [[[0, 1], 'down'], [[1, 0], 'right'], [[0, -1], 'up'], [[-1, 0], 'left']]\n      .map(([off, dir]) => [[at[0] + off[0], at[1] + off[1]], dir])\n      .filter(([newPos, dir]) =>\n        !(\n          ALWAYS_EXIT && arrayEquals(at, [2, 3]) ||\n          newPos[0] < 0 ||\n          newPos[1] < 0 ||\n          newPos[0] > width ||\n          newPos[1] > height ||\n          (arrayEquals(at, [2, 0]) && arrayEquals(newPos, [2, 1])) ||\n          (arrayEquals(at, [2, 1]) && arrayEquals(newPos, [2, 0])) ||\n          positions.find(([x, y]) => x === newPos[0] && y === newPos[1])\n        )\n      );\n  }\n\n  function arrayEquals(a, b) {\n    return JSON.stringify(a) === JSON.stringify(b);\n  }\n</script>\n\n<style>\n  details {\n    cursor: pointer;\n  }\n  summary {\n    display: flex;\n  }\n  summary > :global(*), details > :global(:not(summary):not(.root)) {\n    position: absolute;\n  }\n  details > :global(:not(summary):not(.root):not(.cover)) {\n    pointer-events: none;\n  }\n</style>\n\n<div class=\"root\" style=\"position:relative;{getOffset()};width:0;height:0x\">\n  {#each getValidPositions() as [newPos, dir]}\n    <details>\n      <summary>\n        <LineSegment preview={true} from={at} {dir} index={index+1}/>\n      </summary>\n      <LineSegment from={at} {dir} index={index+999}/>\n      {#each getValidPositions() as [newPos2, dir2]}\n        {#if dir2 !== dir}\n          {#if dir2 === 'right'}\n            <div class=\"cover\" style=\"width:{GRID_WIDTH+LINE_WIDTH}px;height:{LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default\"></div>\n          {/if}\n          {#if dir2 === 'down'}\n            <div class=\"cover\" style=\"width:{LINE_WIDTH}px;height:{GRID_WIDTH+LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default\"></div>\n          {/if}\n          {#if dir2 === 'up'}\n            <div class=\"cover\" style=\"width:{LINE_WIDTH}px;height:{GRID_WIDTH+LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default;bottom:0;margin-bottom:-{LINE_WIDTH}px\"></div>\n          {/if}\n          {#if dir2 === 'left'}\n            <div class=\"cover\" style=\"width:{GRID_WIDTH+LINE_WIDTH}px;height:{LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default;right:0;margin-right:-{LINE_WIDTH}px\"></div>\n          {/if}\n        {/if}\n      {/each}\n\n      {#if GO_BACK_FIX}\n        {#if from === 'right'}\n          <div class=\"cover\" style=\"width:{GRID_WIDTH+LINE_WIDTH}px;height:{LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default;right:0;margin-right:-{LINE_WIDTH}px\"></div>\n        {/if}\n        {#if from === 'down'}\n          <div class=\"cover\" style=\"width:{LINE_WIDTH}px;height:{GRID_WIDTH+LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default;bottom:0;margin-bottom:-{LINE_WIDTH}px\"></div>\n        {/if}\n        {#if from === 'up'}\n          <div class=\"cover\" style=\"width:{LINE_WIDTH}px;height:{GRID_WIDTH+LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default\"></div>\n        {/if}\n        {#if from === 'left'}\n          <div class=\"cover\" style=\"width:{GRID_WIDTH+LINE_WIDTH}px;height:{LINE_WIDTH}px;background-color:#fff;z-index:{index+3};cursor:default\"></div>\n        {/if}\n      {/if}\n      <svelte:self at={newPos} from={dir} width={width} height={height} positions={[...positions, at]} index={index+3}/>\n    </details>\n  {/each}\n  {#if at[0] === width && at[1] === height}\n    <details>\n      <summary>\n        <LineSegment preview={true} from={at} dir=\"exit\" index={index+1}/>\n      </summary>\n      <LineSegment from={at} dir=\"exit\" index={index+999}/>\n      <div style=\"inset:0;margin:-9999px;background-color:#fff;z-index:{index+3}\"></div>\n      <div class=\"cover\" style=\"z-index:99999;position:absolute;width:{GRID_WIDTH*width+LINE_WIDTH}px;height:{GRID_WIDTH*height+LINE_WIDTH}px;bottom:0;right:0;background-color:rgba(255,255,255,0.8);border-radius:{LINE_WIDTH/2}px;color:#000;display:flex;align-items:center;justify-content:center;flex-direction:column;text-align:center;margin-right:-{LINE_WIDTH}px;margin-bottom:-{LINE_WIDTH}px\">\n        {#if arrayEquals(positions, [[0,0],[0,1],[1,1],[1,2],[0,2],[0,3],[1,3]])}\n          <b>ðŸŽ‰ you did it ðŸŽ‰</b>\n        {:else}\n          <b>wrong!</b>\n          <i>try again? (you can undo by clicking on the solid lines!)</i>\n        {/if}\n      </div>\n    </details>\n  {/if}\n</div>"},"pluginId":"source.svelte-component","sends":[],"namedSends":{"374312cc7d1bffac":["Line"]},"graphPos":null},{"id":"eaecf91b5e89d64d","data":{"name":"LineSegment","contents":"<script>\n  export let from;\n  export let dir;\n  export let preview;\n  export let index;\n\n  const LINE_WIDTH = 15;\n  const GRID_WIDTH = 100;\n\n  function getWidth() {\n    if (dir === 'right' || dir === 'left') {\n      return GRID_WIDTH + LINE_WIDTH;\n    } else if (dir === 'exit') {\n      return LINE_WIDTH * 2.5;\n    } else {\n      return LINE_WIDTH;\n    }\n  }\n  function getHeight() {\n    if (dir === 'up' || dir === 'down') {\n      return GRID_WIDTH + LINE_WIDTH;\n    } else {\n      return LINE_WIDTH;\n    }\n  }\n  \n  function getOffset() {\n    if (dir === 'right' || dir === 'exit') {\n      return `left:0`;\n    } else if (dir === 'left') {\n      return `right:0;margin-right:-${LINE_WIDTH}px`;\n    } else if (dir === 'down') {\n      return `top:0`;\n    } else if (dir === 'up') {\n      return `bottom:0;margin-bottom:-${LINE_WIDTH}px`;\n    } else {\n      return '';\n    }\n  }\n\n  function getTransforms() {\n    if (dir === 'exit') {\n      return `transform:rotate(45deg);transform-origin:${LINE_WIDTH/2}px`\n    } else {\n      return '';\n    }\n  }\n</script>\n\n<style>\n  .line {\n    background-color: #83254f;\n    position: absolute;\n  }\n  .preview {\n    opacity: 0.5;\n  }\n</style>\n\n<a class=\"line\" class:preview={preview} style=\"width:{getWidth()}px;height:{getHeight()}px;border-radius:{LINE_WIDTH}px;z-index:{index};{getOffset()};{getTransforms()}\"/>"},"pluginId":"source.svelte-component","sends":[],"namedSends":{"374312cc7d1bffac":["LineSegment"]},"graphPos":null},{"id":"67d0bdc20c9d477c","data":{"mode":"attr"},"pluginId":"transform.style-inliner","sends":["output"],"namedSends":{},"graphPos":null}]}